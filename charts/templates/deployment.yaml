{{- if .Values.global.inClusterMode }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "kube-stack.fullname" . }}-controller-manager
  labels:
    app.kuberentes.io/instance: controller-manager
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: kube-stack
    app.kubernetes.io/part-of: kube-stack
  {{- include "kube-stack.labels" . | nindent 4 }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kube-stack.fullname" . }}-controller-manager
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: kube-stack
    app.kubernetes.io/part-of: kube-stack
    control-plane: controller-manager
  {{- include "kube-stack.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
    {{- include "kube-stack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        control-plane: controller-manager
      {{- include "kube-stack.selectorLabels" . | nindent 8 }}
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      containers:
      - name: prometheus
        image: {{ .Values.global.imageRegistry }}/{{ .Values.prometheus.repository }}:{{ .Values.prometheus.tag }}
        ports:
        - name: prometheus
          containerPort: 9090
        resources:
          requests:
            memory: 50M
            cpu: "50m"
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus
        - mountPath: /prometheus
          name: prometheus-storage
      - name: grafana
        image: {{ .Values.global.imageRegistry }}/{{ .Values.grafana.repository }}:{{ .Values.grafana.tag }}
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          requests:
            memory: 50M
            cpu: "50m"
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-entry
        - mountPath: /etc/dashboards
          name: grafana-dashboards
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=0.0.0.0:8080
        - --leader-elect
        {{- if not .Values.global.inClusterMode }}
        - --leader-election-namespace={{ .Release.Namespace }}
        {{- end }}
        - --webhook-cert-directory=/etc/certs
        {{- if not .Values.global.inClusterMode }}
        - --kubeconfig=/etc/kubeconfig/config
        {{- end }}
        command:
        - /manager
        name: manager
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.global.imageRegistry }}/{{ .Values.controllerManager.repository }}:{{ .Values.controllerManager.tag }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            memory: 50M
            cpu: "50m"
        volumeMounts:
        - mountPath: /etc/certs
          name: certs
        {{- if not .Values.global.inClusterMode }}
        - mountPath: /etc/kubeconfig
          name: kubeconfig
        {{- end }}
      {{- if .Values.global.inClusterMode }}
      serviceAccountName: {{ include "kube-stack.fullname" . }}-controller-manager
      {{- end }}
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          defaultMode: 420
          name: {{ include "kube-stack.fullname" . }}-grafana-datasources
      - name: grafana-entry
        configMap:
          defaultMode: 420
          name: {{ include "kube-stack.fullname" . }}-grafana-dashboard-entry
      - name: grafana-dashboards
        configMap:
          defaultMode: 420
          name: {{ include "kube-stack.fullname" . }}-grafana-dashboards
      - name: prometheus
        configMap:
          defaultMode: 420
          name: {{ include "kube-stack.fullname" . }}-prometheus
      - name: prometheus-storage
        emptyDir: {}
      - name: certs
        secret:
          secretName: {{ include "kube-stack.fullname" . }}-certs
      {{- if not .Values.global.inClusterMode }}
      - name: kubeconfig
        secret:
          secretName: {{ .Values.global.kubeConfigSecretName }}
          items:
          - key: {{ .Values.global.kubeConfigSecretKey }}
            path: config
      {{- end }}
